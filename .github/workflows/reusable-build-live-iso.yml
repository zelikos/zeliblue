---
name: Build ISOs (Live Anaconda)

on:
  workflow_call:
    inputs:
      image:
        description: "Image to build ISO for"
        required: true
        type: string
      version:
        description: "Stable or Testing"
        required: true
        type: string

env:
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  IMAGE_NAME: ${{ inputs.image }}
  IMAGE_TAG: ${{ inputs.version }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: Build ISOs
    runs-on: ${{ matrix.platform == 'amd64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    strategy:
      fail-fast: false
      matrix:
        platform: [amd64]
        flavor: ["silverblue"]
    permissions:
      contents: read
      packages: read
      id-token: write

    steps:
      - name: Install dependencies
        if: matrix.platform == 'arm64'
        run: |
          set -x
          sudo apt update -y
          sudo apt install -y \
            podman

      - name: Maximize build space
        if: matrix.platform != 'arm64' && env.IMAGE_NAME == 'zeliblue-deck'
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e # v9
        with:
          remove-codeql: true

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Mount BTRFS for podman storage
        uses: ublue-os/container-storage-action@main

      # - name: Setup Just
      #   uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3

      # - name: Check Just Syntax
      #   shell: bash
      #   run: |
      #     just check

      - name: Format image ref
        id: image_ref
        # env:
        #   FLAVOR: ${{ matrix.flavor }}
        run: |
          set -eoux pipefail
          image_ref="${IMAGE_REGISTRY}/${IMAGE_NAME}"
          KARGS="NONE"
          echo "image_ref=$image_ref" >> "${GITHUB_OUTPUT}"
          echo "artifact_format="${IMAGE_NAME}-${IMAGE_TAG}-$(uname -m)"" >> "${GITHUB_OUTPUT}"
          echo "kargs=$KARGS" >> "${GITHUB_OUTPUT}"

      - name: Build ISO
        id: build
        uses: ublue-os/titanoboa@main
        with:
          # Always use standard Zeliblue as runtime for Live ISO session
          image-ref: "ghcr.io/zelikos/zeliblue:stable"
          # Image to be installed to target system
          container-image: ${{ steps.image_ref.outputs.image_ref }}:${{ env.IMAGE_TAG }}
          flatpaks-list: ${{ github.workspace }}/iso_files/system-flatpaks.list
          hook-post-rootfs: ${{ github.workspace }}/iso_files/${{ env.IMAGE_NAME }}_iso_config.sh
          kargs: ${{ steps.image_ref.outputs.kargs }}

      - name: Rename ISO
        id: rename
        env:
          OUTPUT_PATH: ${{ steps.build.outputs.iso-dest }}
          # FLAVOR: ${{ matrix.flavor }}
          OUTPUT_NAME: ${{ steps.image_ref.outputs.artifact_format }}
          IMAGE_VERSION: ${{ env.IMAGE_TAG }}
        run: |
          set -x
          mkdir -p output
          OUTPUT_DIRECTORY="$(realpath output)"
          sha256sum "${OUTPUT_PATH}" | tee "${OUTPUT_DIRECTORY}/${OUTPUT_NAME}.iso-CHECKSUM"
          mv "${OUTPUT_PATH}" "${OUTPUT_DIRECTORY}/${OUTPUT_NAME}.iso"
          echo "output_directory=$OUTPUT_DIRECTORY" >> "${GITHUB_OUTPUT}"

      - name: Upload to Job Artifacts
        # if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v4
        with:
          name: ${{ steps.image_ref.outputs.artifact_format }}
          if-no-files-found: error
          path: ${{ steps.rename.outputs.output_directory }}

      # - name: Upload to CloudFlare
      #   if: github.event_name != 'pull_request'
      #   shell: bash
      #   env:
      #     RCLONE_CONFIG_R2_TYPE: s3
      #     RCLONE_CONFIG_R2_PROVIDER: Cloudflare
      #     RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      #     RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      #     RCLONE_CONFIG_R2_REGION: auto
      #     RCLONE_CONFIG_R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
      #     SOURCE_DIR: ${{ steps.rename.outputs.output_directory }}
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y rclone
      #     rclone copy "${SOURCE_DIR}" R2:zeliblue
